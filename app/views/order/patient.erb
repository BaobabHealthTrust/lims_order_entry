<!--

[{:national_id=>"P129500000229", :full_name=>"Mevis Kadammanja", :sex=>"Female", :age=>"51",
:date_of_birth=>"27/Oct/1963", :first_name=>"Mevis", :last_name=>"Kadammanja", :middle_name=>"N/A",
:home_village=>nil, :home_ta=>"TA Malengachanzi", :home_district=>"Nkhotakota ", :current_village=>"Area 25a Houses",
:current_ta=>nil, :current_district=>nil, :current_residence=>"Nsungwi market"}]

-->

<% if @patient.blank? %>

    <div style="width: 100%; text-align: center; margin-top: 15%; font-size: 28px;">
      <i><b>No Match Found!</b></i>
    </div>

    <script>


        function renameBtn() {

            if (__$("btnLogout")) {

                __$("btnLogout").innerHTML = "Cancel";
                __$("btnLogout").setAttribute("onClick", "window.location='/'")

            } else {

                setTimeout("renameBtn()", 100);

            }

        }

        setTimeout("renameBtn()", 100);

    </script>

<% else %>

    <%

       age = nil

       dob = @patient[:date_of_birth].to_date rescue nil

       if !dob.blank?

         days = (Date.today - dob).to_i

         if days < 30 # days

           age = "#{days} days"

         elsif days >= 30 and days <= 90 # weeks

           age = "#{days / 7} weeks"

         elsif days > 90 and days <= 720 # months

           age = "#{days / 30} months"

         else # years

           age = "#{days / 365}"

         end

       end

    %>

    <table width="100%" style="font-size: 20px; margin-left: 10px;" cellpadding="2">
      <tr>
        <td style="color: #23538a; font-size: 18px; font-weight: bold;" align="right">
          N<span style="font-size: 14px;">AME</span>
        </td>
        <td style="color: #23538a;">
          :
        </td>
        <td colspan="4">
          <%= @patient[:full_name] rescue nil %>
        </td>
      </tr>
      <tr>
        <td style="color: #23538a; font-size: 18px; font-weight: bold;" align="right">
          N<span style="font-size: 14px;">ATIONAL ID</span>
        </td>
        <td style="color: #23538a;">
          :
        </td>
        <td colspan="4">
          <%= @patient[:national_id] rescue nil %>
        </td>
      </tr>
      <tr>
        <td style="color: #23538a; font-size: 18px; font-weight: bold;" align="right">
          G<span style="font-size: 14px;">ENDER</span>
        </td>
        <td style="color: #23538a;">
          :
        </td>
        <td>
          <%= @patient[:sex] rescue nil %>
        </td>
        <td style="color: #23538a; font-size: 18px; font-weight: bold;" align="right">
          A<span style="font-size: 14px;">GE</span>
        </td>
        <td style="color: #23538a;">
          :
        </td>
        <td>
          <%= age %> <i>(<%= @patient[:date_of_birth] rescue nil %>)</i>
        </td>
      </tr>
      <tr>
        <td style="color: #23538a; font-size: 18px; font-weight: bold;" align="right">
          A<span style="font-size: 14px;">DDRESS</span>
        </td>
        <td style="color: #23538a;">
          :
        </td>
        <td colspan="4">
          <%= @patient[:current_residence] rescue nil %><%= !@patient[:current_village].blank? ? ", " : "" %>
          <%= @patient[:current_village] rescue nil %><%= !@patient[:current_ta].blank? ? ", " : "" %>
          <%= @patient[:current_ta] rescue nil %><%= !@patient[:current_district].blank? ? ", " : "" %>
          <%= @patient[:current_district] rescue nil %>
        </td>
      </tr>
      <tr>
        <td colspan="6">
          <div id="resultsParent" style="width: 95%; border-top: 1px solid #23538a; margin: auto; border: 1px solid #ccc;">

            <table width="100%">
              <tr style="background-color: #ccc; color: #333; font-size: 18px;">
                <th style="width: 148px; padding: 5px;">
                  Date
                </th>
                <th style="width: 29.5%; padding: 5px;">
                  Test
                </th>
                <th style=" padding: 5px;">
                  Result/Status
                </th>
                <th style="width: 113px; padding: 5px;">
                  Print Label
                </th>
              </tr>
              <tr>
                <td colspan="4">
                  <div id="results" style="height: 400px; overflow: auto; border: 1px solid #ccc; text-align: center; width: 100%;">
                  </div>
                </td>
              </tr>
            </table>

          </div>
        </td>
      </tr>
    </table>

    <button id="btnOrder" class="button_blue" style="float: right; margin-right: 15px; cursor: pointer;" onclick="window.location = '/place_order/<%= @patient[:national_id] rescue nil %>'">Order
      Test
    </button>

    <script>

        var results = [];

        var testNames = {};

        var shortnames = <%= @shorts.to_json.html_safe %>;

        var codes = <%= @codes.to_json.html_safe %>;

        var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

        function attachBtn() {

            if (__$("nav")) {

                __$("nav").appendChild(__$("btnOrder"));

            } else {

                setTimeout("attachBtn()", 100);

            }

            if (__$("btnLogout")) {

                __$("btnLogout").innerHTML = "Cancel";
                __$("btnLogout").setAttribute("onClick", "window.location='/'")

            }

            if (__$("btnNext")) {

                __$("btnNext").innerHTML = "Refresh";


            }

        }

        function padZeros(number, positions) {
            var zeros = parseInt(positions) - String(number).length;
            var padded = "";

            for (var i = 0; i < zeros; i++) {
                padded += "0";
            }

            padded += String(number);

            return padded;
        }

        function loadResults() {

            if (__$("results")) {

                __$("results").innerHTML = "";

                if (results.length == 0) {

                    __$("results").innerHTML = "<div style='margin: auto; font-weight: normal; font-style: italic; " +
                            "margin-top: 40px; font-size: 24px; color: #23538a;'>No tests or results available!</div>";

                    return;

                }

                var result = results[0]["orders"];

                var keys = Object.keys(result);

                var table = document.createElement("table");
                table.width = "100%";
                table.style.fontSize = "16px";

                __$("results").appendChild(table);

                var tbody = document.createElement("tbody");

                table.appendChild(tbody);

                var c = 0;

                for (var i = 0; i < keys.length; i++) {

                    var key = keys[i];

                    testNames[key] = {};

                    var kids = Object.keys(result[key]["results"]);

                    for (var j = 0; j < kids.length; j++) {

                        var kid = kids[j];

                        testNames[key][result[key]["results"][kid]["test_name"]] = true;

                        var tr = document.createElement("tr");

                        if (c % 2 > 0) {

                            tr.style.backgroundColor = "#eee";

                        }

                        tbody.appendChild(tr);

                        var date = "";

                        if (result[key]["results"][kid]["result_date_time"] != null && result[key]["results"][kid]["result_date_time"].trim().length > 0) {

                            var datetime = result[key]["results"][kid]["result_date_time"];
                            var year = parseInt(datetime.substr(0, 4));
                            var month = parseInt(datetime.substr(4, 2)) - 1;
                            var day = parseInt(datetime.substr(6, 2));
                            var hour = parseInt(datetime.substr(8, 2));
                            var minute = parseInt(datetime.substr(10, 2));
                            var second = parseInt(datetime.substr(12, 2));
                            var theDate = new Date(year, month, day, hour, minute, second);

                            date = "<i>" + day + "/" + months[month] + "/" + year + "</i> <b>" + padZeros(hour, 2) + ":" + padZeros(minute, 2) + "</b>";

                        }

                        var td1 = document.createElement("td");
                        td1.innerHTML = date;
                        td1.style.width = "150px";
                        td1.style.border = "1px dotted #ccc";

                        tr.appendChild(td1);

                        var td2 = document.createElement("td");
                        td2.innerHTML = result[key]["results"][kid]["test_name"];
                        td2.style.width = "30%";
                        td2.style.textAlign = "left";
                        td2.style.paddingLeft = "10px";
                        td2.style.border = "1px dotted #ccc";

                        tr.appendChild(td2);

                        if(result[key]["results"][kid]["status"].toLowerCase().trim().match(/ordered/) || result[key]["results"][kid]["status"].toLowerCase().trim().match(/drawn/)) {

                            var edit = document.createElement("img");
                            edit.src = pencil;

                            edit.height = 30;
                            edit.style.cssFloat = "right";
                            edit.style.marginRight = "5px";
                            td2.setAttribute("state", result[key]["results"][kid]["status"]);
                            td2.setAttribute("accession_number", key);
                            td2.setAttribute("test_code", codes[result[key]["results"][kid]["test_name"]]);
                            td2.setAttribute("test_name", result[key]["results"][kid]["test_name"]);
                            td2.style.cursor = "pointer";

                            td2.appendChild(edit);

                            new FastButton(td2, function () {

                                editTest(this.getAttribute("accession_number"), this.getAttribute("state"), this.getAttribute("test_code"), this.getAttribute("test_name"));

                            });

                        }

                        var td3 = document.createElement("td");
                        td3.innerHTML = (result[key]["results"][kid]["result"] != null && String(result[key]["results"][kid]["result"]).trim().length > 0 ?
                                result[key]["results"][kid]["result"] : result[key]["results"][kid]["status"]);
                        td3.style.textAlign = "left";
                        td3.style.paddingLeft = "10px";
                        td3.style.border = "1px dotted #ccc";

                        tr.appendChild(td3);

                        var td4 = document.createElement("td");
                        td4.style.width = "100px";
                        td4.style.border = "1px dotted #ccc";
                        td4.style.padding = "5px";

                        tr.appendChild(td4);

                        if(!result[key]["results"][kid]["status"].toLowerCase().trim().match(/rejected/)) {

                            var print = document.createElement("img");
                            print.src = (result[key]["results"][kid]["status"].toLowerCase().trim() == "ordered" ||
                                    result[key]["results"][kid]["status"].toLowerCase().trim() == "tested" ||
                                    result[key]["results"][kid]["status"].toLowerCase().trim() == "verified" ? printer_red : printer_green);

                            print.height = 50;
                            print.setAttribute("state", result[key]["results"][kid]["status"]);
                            print.setAttribute("accession_number", key);
                            print.setAttribute("test_code", codes[result[key]["results"][kid]["test_name"]]);
                            print.setAttribute("test_name", result[key]["results"][kid]["test_name"]);
                            print.style.cursor = "pointer";

                            td4.appendChild(print);

                            new FastButton(print, function () {

                                printLabel(this.getAttribute("accession_number"), this.getAttribute("state"), "Drawn", this.getAttribute("test_code"), this.getAttribute("test_name"));

                            });

                        } else {

                            td4.innerHTML = "<div style='height: 50px; width: 50px;'>&nbsp;</div>";

                        }

                        c++;

                    }

                }

            }

        }

        function printLabel(accession_number, currentState, state, code, name) {

            if (accession_number == undefined || currentState == undefined || state == undefined) {

                return;

            }

            if (currentState.trim().toLocaleLowerCase() == "ordered") {

                var url = "/update_state/" + accession_number + "?state=" + state + "&test_code=" + code + "&test_name=" + name;

                var httpRequest = new XMLHttpRequest();
                httpRequest.onreadystatechange = function () {

                    if (httpRequest.readyState == 4 && (httpRequest.status == 200 ||
                            httpRequest.status == 304)) {

                        var datetime = (new Date()).getDate() + "/" + months[(new Date()).getMonth()] + "/" + (new Date()).getFullYear() +
                                " " + (new Date()).getHours() + ":" + (new Date()).getMinutes();

                        var currentTests = "";

                        var tests = testNames[accession_number];

                        for (var i = 0; i < tests.length; i++) {

                            var short = shortnames[tests[i]["testName"]];

                            if (short == undefined || short.trim().length == 0) {

                                short = tests[i]["testName"];

                            }

                            currentTests += short + ";"

                        }

                        if (currentTests.trim().length > 12) {

                            currentTests = currentTests.substr(0, 12) + "...";

                        }

                        printBarcode(datetime, currentTests, accession_number);

                    }

                };
                try {
                    httpRequest.open('GET', url, true);
                    httpRequest.send(null);
                } catch (e) {
                }

            } else if (currentState.trim().toLocaleLowerCase() == "verified" || currentState.trim().toLocaleLowerCase() == "tested") {

                var url = "/update_state/" + accession_number + "?state=Reviewed&test_code=" + code + "&test_name=" + name;

                var httpRequest = new XMLHttpRequest();
                httpRequest.onreadystatechange = function () {

                    if (httpRequest.readyState == 4 && (httpRequest.status == 200 ||
                            httpRequest.status == 304)) {

                        var datetime = (new Date()).getDate() + "/" + months[(new Date()).getMonth()] + "/" + (new Date()).getFullYear() +
                                " " + (new Date()).getHours() + ":" + (new Date()).getMinutes();

                        var currentTests = "";

                        if (currentState.trim().toLocaleLowerCase() == "reviewed" || currentState.trim().toLocaleLowerCase() == "verified" || currentState.trim().toLocaleLowerCase() == "tested") {

                            var tests = results[0]["orders"][accession_number]["results"];

                            var keys = Object.keys(tests);

                            for (var i = 0; i < keys.length; i++) {

                                var test = tests[keys[i]]["test_name"];

                                var result = tests[keys[i]]["result"];

                                if (result.trim().length == 0) {
                                    continue;
                                }

                                var datetime = tests[keys[i]]["result_date_time"];

                                var yr = datetime.substr(0, 4);

                                var month = months[parseInt(datetime.substr(4, 2)) - 1];

                                var date = parseInt(datetime.substr(6, 2));

                                var hr = datetime.substr(8, 2);

                                var min = datetime.substr(10, 2);

                                var dateFormatted = date + "/" + month + "/" + yr + " " + hr + ":" + min;

                                currentTests += dateFormatted + "|" + test + "|" + result + ";"

                            }

                        } else {

                            var tests = testNames[accession_number];

                            for (var i = 0; i < tests.length; i++) {

                                var short = shortnames[tests[i]["testName"]];

                                if (short == undefined || short.trim().length == 0) {

                                    short = tests[i]["testName"];

                                }

                                currentTests += short + ";"

                            }

                            if (currentTests.trim().length > 12) {

                                currentTests = currentTests.substr(0, 12) + "...";

                            }
                        }

                        printBarcode(datetime, currentTests, accession_number, undefined, "reviewed");

                    }

                };
                try {
                    httpRequest.open('GET', url, true);
                    httpRequest.send(null);
                } catch (e) {
                }

            } else {

                var datetime = (new Date()).getDate() + "/" + months[(new Date()).getMonth()] + "/" + (new Date()).getFullYear() +
                        " " + (new Date()).getHours() + ":" + (new Date()).getMinutes();

                var currentTests = "";

                if (currentState.trim().toLocaleLowerCase() == "reviewed" || currentState.trim().toLocaleLowerCase() == "verified" || currentState.trim().toLocaleLowerCase() == "tested") {

                    var tests = results[0]["orders"][accession_number]["results"];

                    var keys = Object.keys(tests);

                    for (var i = 0; i < keys.length; i++) {

                        var test = tests[keys[i]]["test_name"];

                        var result = tests[keys[i]]["result"];

                        if (result.trim().length == 0) {
                            continue;
                        }

                        var datetime = tests[keys[i]]["result_date_time"];

                        var yr = datetime.substr(0, 4);

                        var month = months[parseInt(datetime.substr(4, 2)) - 1];

                        var date = parseInt(datetime.substr(6, 2));

                        var hr = datetime.substr(8, 2);

                        var min = datetime.substr(10, 2);

                        var dateFormatted = date + "/" + month + "/" + yr + " " + hr + ":" + min;

                        currentTests += dateFormatted + "|" + test + "|" + result + ";"

                    }

                } else {

                    var tests = testNames[accession_number];

                    for (var i = 0; i < tests.length; i++) {

                        var short = shortnames[tests[i]["testName"]];

                        if (short == undefined || short.trim().length == 0) {

                            short = tests[i]["testName"];

                        }

                        currentTests += short + ";"

                    }

                    if (currentTests.trim().length > 12) {

                        currentTests = currentTests.substr(0, 12) + "...";

                    }

                }

                printBarcode(datetime, currentTests, accession_number, undefined, currentState.trim().toLocaleLowerCase());

            }

        }

        function printBarcode(messageDatetime, testsTBD, accessionNumber, ward, state) {

            if (ward == undefined) {

                ward = "";

            }

            if (state == undefined) {

                state = "";

            }

            var npid = "<%= @patient[:national_id] %>"
            var full_name = "<%= @patient[:full_name] rescue nil %>";

            if (state == "reviewed") {

                if (typeof(Android) != "undefined") {

                    Android.printResultBarcode(full_name, npid, messageDatetime, ward, testsTBD, accessionNumber);

                } else {

                    alert("Results: " + testsTBD);

                }

            } else {
                // printBarcode(String name, String npid, String datetime, String ward, String test, String barcode)
                if (typeof(Android) != "undefined") {

                    Android.printBarcode(full_name, npid, messageDatetime, ward, testsTBD, accessionNumber);

                } else {

                    alert("Accession Number: " + accessionNumber);

                }
            }

            window.location = window.location.href;

        }

        function ajaxTasks() {

            var url = "/get_labs/<%= params[:id] %>";

            var httpRequest = new XMLHttpRequest();
            httpRequest.onreadystatechange = function () {
                handleTasks(httpRequest);
            };
            try {
                httpRequest.open('GET', url, true);
                httpRequest.send(null);
            } catch (e) {
            }
        }

        function handleTasks(aXMLHttpRequest) {
            if (!aXMLHttpRequest) return;

            if (aXMLHttpRequest.readyState == 4 && (aXMLHttpRequest.status == 200 ||
                    aXMLHttpRequest.status == 304)) {

                results = JSON.parse(aXMLHttpRequest.responseText);

                loadResults();

            }
        }

        function editTest(accession_number, currentState, code, name){

            if (!__$("shield")) {

                showShield();

            }

            var popup = document.createElement("div");
            popup.id = "popup";
            popup.style.position = "absolute";
            popup.style.minHeight = "200px";
            popup.style.top = "20%";
            popup.style.width = "330px";
            popup.style.left = ((window.innerWidth - 330) / 2) + "px";
            popup.style.backgroundColor = "#fff";
            popup.style.zIndex = 120;
            popup.style.border = "2px outset #fff";
            popup.style.borderRadius = "8px";

            document.body.appendChild(popup);

            var table = document.createElement("table");
            table.width = "100%";
            table.style.fontSize = "24px";

            popup.appendChild(table);

            var tbody = document.createElement("tbody");

            table.appendChild(tbody);

            var tr1 = document.createElement("tr");

            tbody.appendChild(tr1);

            var th = document.createElement("th");
            th.innerHTML = "Edit/Delete Test " + name + " for Order #" + accession_number;
            th.style.backgroundColor = "#345d8c";
            th.style.color = "#fff";
            th.style.borderTopLeftRadius = "8px";
            th.style.borderTopRightRadius = "8px";
            th.style.border = "2px outset #23538a";
            th.colSpan = "2";

            tr1.appendChild(th);

            var tr2 = document.createElement("tr");

            tbody.appendChild(tr2);

            var td1_1 = document.createElement("td");
            td1_1.colSpan = "2";
            td1_1.style.padding = "10px";
            td1_1.style.paddingTop = "20px";
            td1_1.style.paddingBottom = "20px";
            td1_1.align = "center";
            td1_1.innerHTML = "What do you want to do with this test?";

            tr2.appendChild(td1_1);

            var tr3 = document.createElement("tr");

            tbody.appendChild(tr3);

            var td2_1 = document.createElement("td");
            td2_1.align = "center";
            td2_1.style.padding = "20px";

            tr3.appendChild(td2_1);

            var td2_2 = document.createElement("td");
            td2_2.align = "center";
            td2_2.style.padding = "20px";

            tr3.appendChild(td2_2);

            var btnDelete = document.createElement("button");
            btnDelete.className = "button_red";
            btnDelete.innerHTML = "Delete";
            btnDelete.style.width = "120px";
            btnDelete.style.cursor = "pointer";

            td2_1.appendChild(btnDelete);

            var btnEdit = document.createElement("button");
            btnEdit.className = "button_gray";
            btnEdit.innerHTML = "Change";
            btnEdit.style.width = "120px";
            btnEdit.style.cursor = "pointer";

            td2_2.appendChild(btnEdit);

            /*new FastButton(btnEdit, function () {

                if (__$("popup")) {

                    document.body.removeChild(__$("popup"));

                }

                if (__$("shield")) {

                    document.body.removeChild(__$("shield"));

                }

                window.location = "/place_order/<%= @patient[:national_id] %>?accession_number=" + accession_number +
                        "&state=" + currentState + "&test_code=" + code + "&test_name=" + name;

            });*/

            new FastButton(btnDelete, function () {

                if (__$("popup")) {

                    document.body.removeChild(__$("popup"));

                }

                if (__$("shield")) {

                    document.body.removeChild(__$("shield"));

                }

                confirmAction("Are you sure about deleting this test?", "deleteTest('" + accession_number + "')");

            });

        }

        function deleteTest(id){

            var url = "/update_state/" + id + "?state=Voided";

            var httpRequest = new XMLHttpRequest();
            httpRequest.onreadystatechange = function () {
                if (httpRequest.readyState == 4 && (httpRequest.status == 200 ||
                        httpRequest.status == 304)) {

                    var results = httpRequest.responseText;

                    window.location = window.location.href;

                }
            };
            try {
                httpRequest.open('GET', url, true);
                httpRequest.send(null);
            } catch (e) {
            }
        }

        setTimeout("attachBtn()", 100);

        ajaxTasks();

    </script>

<% end %>